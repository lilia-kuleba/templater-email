{"version":3,"sources":["features/emailTemplater/emailTemplaterAPI.js","features/emailTemplater/emailTemlaterSlice.jsx","features/emailTemplater/ComposeEmailTemplate.jsx","features/emailTemplater/SetValues.jsx","features/emailTemplater/PreviewAndSend.jsx","features/emailTemplater/SuccessNotification.jsx","features/emailTemplater/FailNotification.jsx","App.js","app/store.js","index.js"],"names":["sendEmail","email","fetch","method","headers","body","JSON","stringify","then","response","json","sendNewEmail","createAsyncThunk","a","emailTemplaterSlice","createSlice","name","initialState","recipients","subject","isSuccess","isFail","step","placeholders","placeholdersValue","reducers","changeRecipients","state","action","payload","changeSubject","changeBody","changeStep","changeIsSuccess","changeIsFail","addPlaceholder","changePlaceholderValue","extraReducers","builder","addCase","fulfilled","rejected","actions","selectRecipients","selectSubject","selectBody","selectIsSuccess","selectIsFail","selectStep","selectPlaceholdersValue","selectPlaceholders","ComposeEmailTemplate","useSelector","dispatch","useDispatch","useEffect","filterPlaceholders","regex","replace","split","filter","placeholder","length","test","arr","Array","fill","className","type","value","onChange","event","target","onClick","SetValues","map","i","PreviewAndSend","forEach","readOnly","SuccessNotification","timer","setTimeout","clearTimeout","FailNotification","App","classNames","store","configureStore","reducer","emailTemplaterReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d167f967.chunk.js","sourcesContent":["const baseURL = 'https://mock.at.leanylabs.com/email';\r\n\r\nexport function sendEmail(email) {\r\n  return fetch(baseURL, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-type': 'application/json; charset=UTF-8',\r\n    },\r\n    body: JSON.stringify(email),\r\n  })\r\n    .then(response => response.json());\r\n}\r\n","import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {sendEmail} from \"./emailTemplaterAPI\";\r\n\r\nconst initialState = {\r\n  recipients: '',\r\n  subject: '',\r\n  body: `Hi {name},\\n\\nWeâ€™d like to invite you to a {subject} on {date} at {location}.\\n\\nThanks,\\n{signature}.`,\r\n  isSuccess: false,\r\n  isFail: false,\r\n  step: 1,\r\n  placeholders: [],\r\n  placeholdersValue: [],\r\n};\r\n\r\nexport const sendNewEmail = createAsyncThunk(\r\n  'emailTemplater/sendEmail',\r\n  async (email) => {\r\n    const response = await sendEmail(email);\r\n    return response;\r\n  }\r\n);\r\n\r\nexport const emailTemplaterSlice = createSlice({\r\n  name: 'emailTemplater',\r\n  initialState,\r\n  reducers: {\r\n    changeRecipients: (state, action) => {\r\n      state.recipients = action.payload;\r\n    },\r\n    changeSubject: (state, action) => {\r\n      state.subject = action.payload;\r\n    },\r\n    changeBody: (state, action) => {\r\n      state.body = action.payload;\r\n    },\r\n    changeStep: (state, action) => {\r\n      state.step += action.payload;\r\n    },\r\n    changeIsSuccess: (state, action) => {\r\n      state.isSuccess = action.payload;\r\n    },\r\n    changeIsFail: (state, action) => {\r\n      state.isFail = action.payload;\r\n    },\r\n    addPlaceholder: (state, action) => {\r\n      state.placeholders = action.payload;\r\n    },\r\n    changePlaceholderValue: (state, action) => {\r\n      state.placeholdersValue = action.payload;\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(sendNewEmail.fulfilled, (state) => {\r\n        state.isSuccess = true;\r\n      })\r\n      .addCase(sendNewEmail.rejected, (state) => {\r\n        state.isFail = true;\r\n      })\r\n  }\r\n});\r\n\r\nexport const {\r\n  changeRecipients,\r\n  changeSubject,\r\n  changeBody,\r\n  changeStep,\r\n  changeIsSuccess,\r\n  changeIsFail,\r\n  addPlaceholder,\r\n  changePlaceholderValue,\r\n} = emailTemplaterSlice.actions;\r\n\r\nexport const selectRecipients = state => state.email.recipients;\r\nexport const selectSubject = state => state.email.subject;\r\nexport const selectBody = state => state.email.body;\r\nexport const selectIsSuccess = state => state.email.isSuccess;\r\nexport const selectIsFail = state => state.email.isFail;\r\nexport const selectStep = state => state.email.step;\r\nexport const selectPlaceholdersValue = state => state.email.placeholdersValue;\r\nexport const selectPlaceholders = state => state.email.placeholders;\r\n\r\nexport default emailTemplaterSlice.reducer;\r\n","import React, { useEffect } from 'react';\r\nimport './ComposeEmailTemplate.scss';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n  addPlaceholder,\r\n  changeBody, changePlaceholderValue,\r\n  changeRecipients, changeStep,\r\n  changeSubject,\r\n  selectBody,\r\n  selectRecipients,\r\n  selectSubject\r\n} from './emailTemlaterSlice';\r\n\r\nexport const ComposeEmailTemplate = () => {\r\n  const recipients = useSelector(selectRecipients);\r\n  const subject = useSelector(selectSubject);\r\n  const body = useSelector(selectBody);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    filterPlaceholders();\r\n  }, [body])\r\n\r\n  const filterPlaceholders = () => {\r\n    const regex = /^[-_a-zA-Z0-9{}]+$/;\r\n    const placeholders = body\r\n      .replace(/(\\r\\n|\\n|\\r)/gm, \" \")\r\n      .replace(/[.,\\s]/g, ' ')\r\n      .split(' ')\r\n      .filter(placeholder => {\r\n        if ((placeholder[0] !== '{' || placeholder[placeholder.length - 1] !== '}')) return false;\r\n\r\n        return regex.test(placeholder);\r\n      })\r\n\r\n    const arr = new Array(placeholders.length);\r\n    dispatch(changePlaceholderValue(arr.fill('')));\r\n    dispatch(addPlaceholder(placeholders));\r\n  }\r\n\r\n  return (\r\n    <form className=\"main__form form\">\r\n      <div className=\"form__title\">Compose Email Template</div>\r\n      <label className=\"form__label\">\r\n        <span className=\"form__text\">\r\n          Recipients\r\n        </span>\r\n        <input\r\n          className=\"form__input\"\r\n          type=\"text\"\r\n          placeholder=\"{recipient}\"\r\n          value={recipients}\r\n          onChange={event => {\r\n            dispatch(changeRecipients(event.target.value))\r\n          }}\r\n        />\r\n      </label>\r\n      <label className=\"form__label\">\r\n        <span className=\"form__text\">\r\n          Subject\r\n        </span>\r\n        <input\r\n          className=\"form__input\"\r\n          type=\"text\"\r\n          placeholder=\"{subject}\"\r\n          value={subject}\r\n          onChange={event => {\r\n            dispatch(changeSubject(event.target.value))\r\n          }}\r\n        />\r\n      </label>\r\n      <label className=\"form__label\">\r\n        <span className=\"form__text\">\r\n          Body\r\n        </span>\r\n        <textarea\r\n          className=\"form__textarea\"\r\n          value={body}\r\n          onChange={event => {\r\n            dispatch(changeBody(event.target.value));\r\n          }}\r\n        />\r\n      </label>\r\n      <button\r\n        className=\"form__nextButton button\"\r\n        type=\"button\"\r\n        onClick={() => dispatch(changeStep(1))}\r\n      >\r\n        SET VARIABLES\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport './ComposeEmailTemplate.scss';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n  changeStep,\r\n  selectPlaceholdersValue,\r\n  selectPlaceholders,\r\n  changePlaceholderValue\r\n} from './emailTemlaterSlice';\r\n\r\nexport const SetValues = () => {\r\n  const placeholders = useSelector(selectPlaceholders);\r\n  let placeholdersValue = [...useSelector(selectPlaceholdersValue)];\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <form className=\"main__form form\">\r\n      <div className=\"form__title\">Set Values</div>\r\n      {placeholders.map((placeholder, i) => (\r\n        <label\r\n          key={i}\r\n          className=\"form__label\"\r\n        >\r\n        <span className=\"form__text\">\r\n          {placeholder}\r\n        </span>\r\n          <input\r\n            className=\"form__input\"\r\n            type=\"email\"\r\n            placeholder={placeholder}\r\n            value={placeholdersValue[i]}\r\n            onChange={event => {\r\n              placeholdersValue[i] = event.target.value;\r\n              dispatch(changePlaceholderValue(placeholdersValue));\r\n            }}\r\n          />\r\n        </label>\r\n      ))}\r\n      <div className=\"form__buttonsBlock\">\r\n        <button\r\n          className=\"form__previousButton button\"\r\n          type=\"button\"\r\n          onClick={() => dispatch(changeStep(-1))}\r\n        >\r\n          BACK\r\n        </button>\r\n        <button\r\n          className=\"form__nextButton button\"\r\n          type=\"button\"\r\n          onClick={() => dispatch(changeStep(1))}\r\n        >\r\n          PREVIEW\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport './ComposeEmailTemplate.scss';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectPlaceholders, selectPlaceholdersValue, sendNewEmail } from './emailTemlaterSlice';\r\nimport {\r\n  changeStep,\r\n  selectBody,\r\n  selectRecipients,\r\n  selectSubject\r\n} from \"./emailTemlaterSlice\";\r\n\r\nexport const PreviewAndSend = () => {\r\n  const recipients = useSelector(selectRecipients);\r\n  const subject = useSelector(selectSubject);\r\n  const dispatch = useDispatch();\r\n  const placeholders = useSelector(selectPlaceholders);\r\n  const placeholdersValue = useSelector(selectPlaceholdersValue);\r\n  let body = useSelector(selectBody);\r\n\r\n  placeholders.forEach((placeholder, i) => body = body.replace(placeholder, placeholdersValue[i] || placeholder));\r\n\r\n  return (\r\n    <form className=\"main__form form\">\r\n      <div className=\"form__title\">Preview and Send</div>\r\n      <label className=\"form__label\">\r\n        <span className=\"form__text\">\r\n          Recipients\r\n        </span>\r\n        <input\r\n          className=\"form__input\"\r\n          type=\"text\"\r\n          readOnly\r\n          value={recipients}\r\n        />\r\n      </label>\r\n      <label className=\"form__label\">\r\n        <span className=\"form__text\">\r\n          Subject\r\n        </span>\r\n        <input\r\n          className=\"form__input\"\r\n          type=\"text\"\r\n          readOnly\r\n          value={subject}\r\n        />\r\n      </label>\r\n      <label className=\"form__label\">\r\n        <span className=\"form__text\">\r\n          Body\r\n        </span>\r\n        <textarea\r\n          className=\"form__textarea\"\r\n          readOnly\r\n          value={body}\r\n        />\r\n      </label>\r\n      <div className=\"form__buttonsBlock\">\r\n        <button\r\n          className=\"form__previousButton button\"\r\n          type=\"button\"\r\n          onClick={() => dispatch(changeStep(-1))}\r\n        >\r\n          BACK\r\n        </button>\r\n        <button\r\n          className=\"form__nextButton button\"\r\n          type=\"button\"\r\n          onClick={() => dispatch(sendNewEmail({\r\n            recipients,\r\n            subject,\r\n            body,\r\n          }))}\r\n        >\r\n          SEND\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport './ComposeEmailTemplate.scss';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changeIsSuccess} from \"./emailTemlaterSlice\";\r\n\r\nexport const SuccessNotification = () => {\r\n  const dispatch = useDispatch();\r\n  let timer;\r\n\r\n  useEffect(() => {\r\n    timer = setTimeout(() => {\r\n      dispatch(changeIsSuccess(false));\r\n    }, 5000);\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"sendStatus\">\r\n      <div className=\"sendStatus__container\">\r\n        <div className=\"sendStatus__color sendStatus__color--green\"/>\r\n        <div className=\"sendStatus__title\">Email sent successfully!</div>\r\n      </div>\r\n      <button\r\n        onClick={() => {\r\n          dispatch(changeIsSuccess(false));\r\n          clearTimeout(timer);\r\n        }}\r\n        className=\"sendStatus__button\"\r\n      >\r\n        x\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport './ComposeEmailTemplate.scss';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changeIsFail} from \"./emailTemlaterSlice\";\r\n\r\nexport const FailNotification = () => {\r\n  const dispatch = useDispatch();\r\n  let timer;\r\n\r\n  useEffect(() => {\r\n    timer = setTimeout(() => {\r\n      dispatch(changeIsFail(false));\r\n    }, 5000);\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"sendStatus\">\r\n      <div className=\"sendStatus__container\">\r\n        <div className=\"sendStatus__color sendStatus__color--red\"/>\r\n        <div className=\"sendStatus__title\">Failed to send email!</div>\r\n      </div>\r\n      <button\r\n        onClick={() => {\r\n          dispatch(changeIsFail(false));\r\n          clearTimeout(timer);\r\n        }}\r\n        className=\"sendStatus__button\"\r\n      >\r\n        x\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport classNames from \"classnames\";\nimport {useSelector} from \"react-redux\";\nimport {selectIsFail, selectIsSuccess, selectStep} from \"./features/emailTemplater/emailTemlaterSlice\";\nimport {ComposeEmailTemplate} from \"./features/emailTemplater/ComposeEmailTemplate\";\nimport {SetValues} from \"./features/emailTemplater/SetValues\";\nimport {PreviewAndSend} from \"./features/emailTemplater/PreviewAndSend\";\nimport {SuccessNotification} from \"./features/emailTemplater/SuccessNotification\";\nimport {FailNotification} from \"./features/emailTemplater/FailNotification\";\n\nfunction App() {\n  const step = useSelector(selectStep);\n  const isSuccess = useSelector(selectIsSuccess);\n  const isFail = useSelector(selectIsFail);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header header\">\n        <div className=\"header__logo\">ET</div>\n        <div className=\"header__title\">Email Templater</div>\n      </header>\n      <main className=\"App__main main\">\n        <ul className=\"main__statusEmail statusEmail\">\n          <li className={classNames(\n            \"statusEmail__item\",\n            \"statusEmail__item--1\",\n            {\"statusEmail__item--active\": step === 1}\n          )}>\n            1\n          </li>\n          <li className={classNames(\n            \"statusEmail__item\",\n            \"statusEmail__item--2\",\n            {\"statusEmail__item--active\": step === 2}\n          )}>\n            2\n          </li>\n          <li className={classNames(\n            \"statusEmail__item\",\n            \"statusEmail__item--3\",\n            {\"statusEmail__item--active\": step === 3}\n          )}>\n            3\n          </li>\n        </ul>\n        {step === 1 && <ComposeEmailTemplate/>}\n        {step === 2 && <SetValues/>}\n        {step === 3 && <PreviewAndSend/>}\n        <div className=\"main__status\">\n          {isSuccess && <SuccessNotification/>}\n          {isFail && <FailNotification/>}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport emailTemplaterReducer from '../features/emailTemplater/emailTemlaterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    email: emailTemplaterReducer,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}